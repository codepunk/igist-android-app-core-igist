/*
 * Copyright (c) 2018 IGIST.io. All rights reserved.
 * Author(s): Scott Slater
 */

apply plugin: "com.android.application"

apply plugin: "androidx.navigation.safeargs"
apply plugin: "io.fabric"
apply plugin: "kotlin-android"
apply plugin: "kotlin-android-extensions"
apply plugin: "kotlin-kapt"
apply plugin: 'org.jetbrains.dokka-android'

import com.android.build.gradle.api.BaseVariant

android {
    compileSdkVersion rootProject.build_versions.target_sdk
    buildToolsVersion rootProject.build_versions.build_tools

    defaultConfig {
        applicationId "io.igist.core"
        minSdkVersion rootProject.build_versions.min_sdk
        targetSdkVersion rootProject.build_versions.target_sdk
        versionCode 1
        versionName "0.1"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true

        kapt {
            arguments {
                arg("room.schemaLocation", "$projectDir/schemas".toString())
            }
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix "-DEBUG"
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    dataBinding {
        enabled = true
    }

    dokka {
        outputFormat = 'html'
        outputDirectory = "${rootProject.buildDir}/javadoc"
        includeNonPublic = true
    }

    applicationVariants.all { variant ->
        variant.buildConfigField("boolean", "SET_DEFAULT_BOOK_ID", "false")

        makeConstantValue(variant, ConstantType.STRING, "APP_FILES_DIRECTORY", "app-files")
        makeConstantValue(variant, ConstantType.STRING, "BASE_URL", "https://igist.io")
        makeConstantValue(variant, ConstantType.LONG, "DEFAULT_BOOK_ID", "1")

        makePreferenceKeys(
                variant,
                "VERIFIED_BETA_KEY",
                "CURRENT_BOOK_ID"
        )

        makeIntentEntities(
                variant,
                IntentEntityType.ACTION,
                "SELECT_BOOK"
        )

        makeKeys(
                variant,
                "BOOK_ID",
                "BOOK_TITLE",
                "DESCRIPTION",
                "LAUNCHED_BETA_KEY_PAGE",
                "RESULT_MESSAGE"
        )
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "android.arch.lifecycle:extensions:${rootProject.versions.lifecycle}"
    implementation "android.arch.lifecycle:common-java8:${rootProject.versions.lifecycle}"
    implementation "android.arch.lifecycle:runtime:${rootProject.versions.lifecycle}"
    implementation "android.arch.persistence.room:runtime:${rootProject.versions.room}"
    implementation "android.arch.navigation:navigation-fragment-ktx:${rootProject.versions.navigation}"
    implementation "android.arch.navigation:navigation-ui-ktx:${rootProject.versions.navigation}"
    implementation "androidx.appcompat:appcompat:${rootProject.versions.androidx_appcompat}"
    implementation "androidx.constraintlayout:constraintlayout:${rootProject.versions.androidx_constraint}"
    implementation "androidx.preference:preference:${rootProject.versions.androidx_legacy}"
    implementation "androidx.multidex:multidex:${rootProject.versions.multidex}"
    implementation ("com.crashlytics.sdk.android:crashlytics:${rootProject.versions.crashlytics}") {
        transitive = true
    }
    implementation "com.google.dagger:dagger:${rootProject.versions.dagger}"
    implementation "com.google.dagger:dagger-android:${rootProject.versions.dagger}"
    implementation "com.google.dagger:dagger-android-support:${rootProject.versions.dagger}"
    implementation "io.fabric.tools:gradle:${rootProject.versions.fabric}"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${rootProject.versions.kotlin}"
    implementation "com.squareup.retrofit2:retrofit:${rootProject.versions.retrofit}"
    implementation "com.squareup.retrofit2:converter-moshi:${rootProject.versions.retrofit}"

    implementation project(':doofenschmirtz')
    implementation project(':punkubator')

    kapt "android.arch.lifecycle:compiler:${rootProject.versions.lifecycle}"
    kapt "android.arch.persistence.room:compiler:${rootProject.versions.room}"
    kapt "com.google.dagger:dagger-android-processor:${rootProject.versions.dagger}"
    kapt "com.google.dagger:dagger-compiler:${rootProject.versions.dagger}"

    testImplementation "junit:junit:${rootProject.versions.junit}"

    androidTestImplementation "android.arch.navigation:navigation-testing-ktx:${rootProject.versions.navigation_testing}"
    androidTestImplementation "android.arch.persistence.room:testing:${rootProject.versions.room}"
    androidTestImplementation "com.android.support.test.espresso:espresso-core:${rootProject.versions.test_espresso_core}"
    androidTestImplementation "com.android.support.test:runner:${rootProject.versions.test_runner}"
}

// region Methods

def enum ConstantType {
    INTEGER("int", "integer", "%s"),
    LONG("long", "integer", "%sL"),
    STRING("String", "string", "\"%s\"")

    public final String configFieldType
    public final String resourceType
    public final String configFieldFormat

    ConstantType(String configFieldType, String resourceType, String configFieldFormat) {
        this.configFieldType = configFieldType
        this.resourceType = resourceType
        this.configFieldFormat = configFieldFormat
    }
}

static def makeConstantValue(
        BaseVariant variant,
        ConstantType type,
        String name,
        String value
) {
    def buildConfigValue = String.format(type.configFieldFormat, value)
    variant.buildConfigField(type.configFieldType, name, buildConfigValue)

    def resourceName = name.toLowerCase(Locale.US)
    variant.resValue(type.resourceType, resourceName, value)
}

static def makeKeys(BaseVariant variant, String... keys) {
    keys.each { key ->
        def buildConfigName = "KEY_$key"
        def buildConfigValue = "\"${variant.applicationId}.$key\""
        variant.buildConfigField("String", buildConfigName, buildConfigValue)
    }
}

static def makePreferenceKeys(BaseVariant variant, String... keys) {
    keys.each { key ->
        def fullKey = "PREF_KEY_$key"
        def buildConfigValue = "\"${variant.applicationId}.$fullKey\""
        variant.buildConfigField("String", fullKey, buildConfigValue)

        def resourceName = fullKey.toLowerCase(Locale.US)
        def resourceValue = "${variant.applicationId}.$fullKey"
        variant.resValue("string", resourceName, resourceValue)
    }
}

def enum IntentEntityType {
    ACTION,
    CATEGORY,
    EXTRA
}

static def makeIntentEntities(BaseVariant variant, IntentEntityType type, String... names) {
    names.each { name ->
        def lowerType = type.toString().toLowerCase(Locale.US)
        def buildConfigName = "${type.toString()}_$name"
        def buildConfigValue = "\"${variant.applicationId}.intent.$lowerType.$name\""
        variant.buildConfigField("String", buildConfigName, buildConfigValue)

        def resourceName = "intent_${lowerType}_${name.toLowerCase(Locale.US)}"
        def resourceValue = "${variant.applicationId}.intent.$lowerType.$name"
        variant.resValue("string", resourceName, resourceValue)
    }
}

// endregion Methods
